@page "/students"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@code {
    private List<Student> students = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            students = await Http.GetFromJsonAsync<List<Student>>("api/students/view-only");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching students: {ex.Message}");
        }
        isLoading = false;
    }

    private async Task DeleteStudent(int studentId)
    {
        bool confirmDelete = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this student?");
        if (!confirmDelete) return;

        try
        {
            var response = await Http.DeleteAsync($"api/students/admin/delete/{studentId}");
            if (response.IsSuccessStatusCode)
            {
                students.RemoveAll(s => s.Id == studentId);
            }
            else
            {
                Console.WriteLine("Failed to delete student.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting student: {ex.Message}");
        }
    }

    private void EditStudent(int studentId)
    {
        Navigation.NavigateTo($"/student-form/{studentId:int?}");
    }
}

<h3>Student List</h3>

@if (isLoading)
{
    <p>Loading students...</p>
}
else if (students.Count > 0)
{
    @foreach (var student in students)
    {
        <div class="student-card">
            <StudentDetails Student="student" />
            <button class=" btn btn-primary btn-sm w-100"@onclick="() => EditStudent(student.Id)">✏️ Edit</button>
            <button class="btn btn-primary btn-sm w-100"@onclick="() => DeleteStudent(student.Id)">🗑️ Delete</button>
        </div>
        <hr />
    }
}
else
{
    <p>No students found.</p>
}
