@page "/fee"
@using BlazorApp1.Services
@using BlazorApp1.Model
@inject NavigationManager Navigation
@inject StudentFeeService StudentFeeService
@inject IJSRuntime JSRuntime

<h3 class="title">🎓 Student Fee Management</h3>

<div class="d-flex justify-content-between mb-3">
    <a class="accordion-header" href="/fees"> Add Student Fee</a>
    <input @bind="searchQuery" @bind:event="oninput" class="form-control w-25" placeholder="🔍 Search by Name or Reg No..." />
</div>


<table class="table table-custom table-hover table-bordered">
    <thead class="table-dark">
        <tr>
            <th>Registration Number</th>
            <th>Name</th>
            <th>Is New Student</th>
            <th>Class</th>
            <th>Admission Fee</th>
            <th>Admission Amount Paid</th>
            <th>Admission Due</th>
            <th>Admission Bill No</th>
            <th>Admission Date</th>
            <th>First Term Fee</th>
            <th>First Term Amount Paid</th>
            <th>First Term Due</th>
            <th>First Term Bill No</th>
            <th>First Term Date</th>
            <th>Second Term Fee</th>
            <th>Second Term Amount Paid</th>
            <th>Second Term Due</th>
            <th>Second Term Bill No</th>
            <th>Second Term Date</th>
            <th>Annual Fees</th>
            <th>Dues</th>
            <th>Concession</th>
            <th>Remarks</th>
            <th>Bus First Term Fee</th>
            <th>Bus First Term Amount Paid</th>
            <th>Bus First Term Due</th>
            <th>Bus Second Term Fee</th>
            <th>Bus Second Term Amount Paid</th>
            <th>Bus Second Term Due</th>
            <th>Bus Point</th>
            <th>WhatsApp Number</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var fee in studentFees.Where(f =>
        string.IsNullOrWhiteSpace(searchQuery) ||
        f.StudentName.ToLower().Contains(searchQuery.ToLower()) ||
        f.RegistrationNumber.ToString().Contains(searchQuery))
        .ToList())
        {
            <tr class="@(IsFeeZero(fee) ? "table-danger" : HasDueAmount(fee) ? "table-warning" : "")">
                <td>@fee.RegistrationNumber</td>

                <!-- Student Name Highlight -->
                <td class="@(IsFeeZero(fee) ? "table-danger fw-bold" : HasDueAmount(fee) ? "table-warning " : "")">
                    @fee.StudentName
                </td>

                <td>@fee.IsNewStudent</td>
                <td>@fee.ClassSection</td>
                <td>@fee.AdmissionFee</td>

                <td class="@(IsFeeZero(fee) ? "table-danger" : HasDueAmount(fee) ? "table-warning" : "")">
                    @(fee.AdmissionAmountPaid?.ToString() ?? "N/A")
                </td>


                <td>@fee.AdmissionDue</td>
                <td>@fee.AdmissionBillNo</td>

                <td>@(fee.AdmissionDate?.ToShortDateString() ?? "N/A")</td>
                <td>@fee.FirstTermFee</td>


                <td class="@(IsFeeZero(fee) ? "table-danger" : HasDueAmount(fee) ? "table-warning" : "")">
                    @(fee.FirstTermAmountPaid?.ToString() ?? "N/A")
                </td>


                <td>@fee.FirstTermDue</td>
                <td>@fee.FirstTermBillNo</td>
                <td>@(fee.FirstTermDate?.ToShortDateString() ?? "N/A")</td>
                <td>@fee.SecondTermFee</td>

                <!-- Highlight Second Term Amount Paid if 0 -->
                <td class="@(IsFeeZero(fee) ? "table-danger" : HasDueAmount(fee) ? "table-warning" : "")">
                    @(fee.SecondTermAmountPaid?.ToString() ?? "N/A")
                </td>


                <td>@fee.SecondTermDue</td>
                <td>@fee.SecondTermBillNo</td>
                <td>@(fee.SecondTermDate?.ToShortDateString() ?? "N/A")</td>
                <td>@fee.AnnualFees</td>

                <!-- Highlight Dues if any fee is 0 -->
                <td class="@(IsFeeZero(fee) ? "table-danger" : HasDueAmount(fee) ? "table-warning" : "")">
                    @fee.Dues
                </td>


                <td>@fee.Concession</td>
                <td>@fee.Remarks</td>

                <td>@fee.BusFirstTermFee</td>
                <td>@fee.BusFirstTermAmountPaid</td>


                <td>@fee.BusFirstTermDue</td>

                <td>@fee.BusSecondTermFee</td>

                <td>@fee.BusSecondTermAmountPaid </td>


                <td>@fee.BusSecondTermDue</td>
                <td>@fee.BusPoint</td>
                <td>@fee.WhatsAppNumber</td>
                <td style="white-space:nowrap">
                    <div class="d-flex gap-2">
                        <button class="btn btn-primary btn-sm w-100"  @onclick ="() => EditFee(fee.RegistrationNumber)">✏️ Edit</button>
                        <button class="btn btn-primary btn-sm w-100" @onclick="() => ConfirmDelete(fee.RegistrationNumber)">🗑 Delete</button>
                    </div>
                </td>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr class="table-info">
            <td colspan="1"><strong>Total:</strong></td>
            <td><strong>@feeSummary.TotalStudents</strong></td>
            <td colspan="1"></td>
            <td colspan="1"></td>
            <td><strong>@feeSummary.TotalAdmissionFee</strong></td>
            <td><strong>@feeSummary.TotalAdmissionAmountPaid</strong></td>
            <td><strong>@feeSummary.TotalAdmissionDue</strong></td>
            <td colspan="1"></td>
            <td colspan="1"></td>
            <td><strong>@feeSummary.TotalFirstTermFee</strong></td>
            <td><strong>@feeSummary.TotalFirstTermAmountPaid</strong></td>
            <td><strong>@feeSummary.TotalFirstTermDue</strong></td>
            <td colspan="1"></td>
            <td colspan="1"></td>
            <td><strong>@feeSummary.TotalSecondTermFee</strong></td>
            <td><strong>@feeSummary.TotalSecondTermAmountPaid</strong></td>
            <td><strong>@feeSummary.TotalSecondTermDue</strong></td>
            <td colspan="1"></td>
            <td colspan="1"></td>
            <td><strong>@feeSummary.TotalAnnualFees</strong></td>
            <td><strong>@feeSummary.TotalDues</strong></td>
            <td><strong>@feeSummary.TotalConcession</strong></td>
            <td colspan="1"></td>
            <td><strong>@feeSummary.TotalBusFirstTermFee</strong></td>
            <td><strong>@feeSummary.TotalBusFirstTermAmountPaid</strong></td>
            <td><strong>@feeSummary.TotalBusFirstTermDue</strong></td>
            <td><strong>@feeSummary.TotalBusSecondTermFee</strong></td>
            <td><strong>@feeSummary.TotalBusSecondTermAmountPaid</strong></td>
            <td><strong>@feeSummary.TotalBusSecondTermDue</strong></td>
            <td colspan="1"></td>
            <td colspan="1"></td>
            <td colspan="1"></td>
        </tr>
    </tfoot>
</table>

@code {

    private List<StudentFee> studentFees = new();
    private FeeSummary feeSummary = new();
    private string searchQuery = "";

    protected override async Task OnInitializedAsync()
    {
        studentFees = await StudentFeeService.GetStudentFeesAsync();
        feeSummary = await StudentFeeService.GetStudentFeeSummaryAsync();
    }

    private async Task EditFee(int registrationNumber)
    {
        var request = new StudentFeeEditRequest
            {
                RegistrationNumber = registrationNumber,
                Status = "Pending"
            };

        var result = await StudentFeeService.SubmitEditRequestAsync(request);
        if (result.IsSuccess)
        {
            Navigation.NavigateTo($"/fees/edit/{registrationNumber}");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", result.Message);
        }
    }

    private async Task ConfirmDelete(int registrationNumber)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this record?");
        if (confirmed)
        {
            await StudentFeeService.DeleteStudentFeeAsync(registrationNumber);
            studentFees.RemoveAll(f => f.RegistrationNumber == registrationNumber);
        }
    }
    private bool HasDueAmount(StudentFee fee)
    {

        return fee.AdmissionDue > 0 ||

               fee.FirstTermDue > 0 ||

               fee.SecondTermDue > 0;

    }

    private bool IsFeeZero(StudentFee fee)
    {

        return (fee.AdmissionAmountPaid == 0 || fee.AdmissionAmountPaid == null) ||

               (fee.FirstTermAmountPaid == 0 || fee.FirstTermAmountPaid == null) ||

               (fee.SecondTermAmountPaid == 0 || fee.SecondTermAmountPaid == null);

    }
}
